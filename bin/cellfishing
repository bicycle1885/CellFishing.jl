#!/usr/bin/env julia

using CellFishing
using HDF5
using DocOpt

using Dates
using Random

args = docopt("""
Usage:
    cellfishing build [--n-bits=<n-bits> --n-lshashes=<n-lshashes>] <reference>
    cellfishing search [--infer-stats=<data>] <database> <query>

CellFishing â€• Cell search engine for scRNA-seq.

The 'build' command builds a search database from <reference>.
The 'search' command searches <database> for similar cells of <query>.
The output of the search results will be written to the standard output.

Currently, the following file formats are supported for a DGE matrix:

- Loom: http://loompy.org/
    Feature names are read from '/row_attrs/Gene'.
    Cell names are read from '/col_attrs/CellID'.
    Counts are read from '/matrix`.

Options:
    -h --help                  Show this help.
    --version                  Show version.
    --n-bits=<n-bits>          The number of bits for hashing [default: 128].
    --n-lshashes=<n-lshashes>  The number of locality-sensitive hashes [default: 4].
    --infer-stats=<data>       Infer statistics from the query, the database, or both [default: both].
""")

function loadloom(datafile)
    HDF5.h5open(datafile) do file
        counts = Matrix(read(file, "/matrix")')
        featurenames = read(file, "/row_attrs/Gene")
        cellnames = read(file, "/col_attrs/CellID")
        return (counts=counts, featurenames=featurenames, cellnames=cellnames)
    end
end

function loaddata(datafile)
    if endswith(datafile, ".loom")
        return loadloom(datafile)
    else
        error("unsupported file format")
    end
end

macro message(msg, block)
    quote
        print(stderr, "  ", rpad(string($(esc(msg)), " "), 25, '\u2015'), " ")
        starttime = now()
        $(esc(block))
        println(stderr, Dates.canonicalize(Dates.CompoundPeriod(now() - starttime)))
    end
end

function writeknn(file, cellnames_query, cellnames_reference, neighbors)
    k, n = size(neighbors)
    for j in 1:n
        print(file, cellnames_query[j])
        for i in 1:k
            print(file, '\t', cellnames_reference[neighbors[i,j]])
        end
        println(file)
    end
end

using Random: seed!
seed!(1234)
if args["build"]
    filename = args["<reference>"]
    println(stderr, "Build a search database from $(filename).")
    @message "Loading data" begin
        data = loaddata(filename)
    end
    @message "Selecting features" begin
        features = CellFishing.selectfeatures(data.counts, data.featurenames)
    end
    @message "Creating a database" begin
        n_bits = parse(Int, args["--n-bits"])
        n_lshashes = parse(Int, args["--n-lshashes"])
        database = CellFishing.CellIndex(data.counts, features, metadata=data.cellnames, n_bits=n_bits, n_lshashes=n_lshashes)
    end
    dbfile = string(basename(filename), ".cf")
    @message "Writing the database" begin
        CellFishing.save(dbfile, database)
    end
    println(stderr, "The serialized database is in $(dbfile).")
elseif args["search"]
    k = 10
    database = args["<database>"]
    println(stderr, "Search $(database) for $(k) neighbors.")
    @message "Loading the database" begin
        database = CellFishing.load(database)
    end
    @message "Loading query data" begin
        data = loaddata(args["<query>"])
    end
    @message "Searching the database" begin
        inferstats = args["--infer-stats"]
        inferstats = inferstats == "query"    ? :query :
                     inferstats == "database" ? :database :
                     inferstats == "both"     ? :both :
                     error("invalid --infer-stats option")
        neighbors = CellFishing.findneighbors(k, data.counts, data.featurenames, database, inferstats=inferstats)
    end
    @message "Writing neighbors" begin
        writeknn(stdout, data.cellnames, database.metadata, neighbors.indexes)
    end
else
    @assert false
end
